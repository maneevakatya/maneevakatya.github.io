var compareVersionjQuery = function(v) {
    required = v.split('.', 2);
    current = jQuery.fn.jquery.split('.', 2);
    return (parseInt(current[0]) > parseInt(required[0])) || (parseInt(current[0]) == parseInt(required[0]) && parseInt(current[1]) >= parseInt(required[1]))
}
if (!window.jQuery || (window.jQuery && !compareVersionjQuery('1.5'))) {
    console.error('Version jQuery < 1.5 or jQuery is not found!');
} else {
    (function(window, document, $, undefined) {
        "use strict";
        var W = $(window),
            D = $(document),
            version = '3.1.5',
            F, pseudoRandom = function() {
                var now = new Date;
                var res = String(Math.abs(now.getMilliseconds() - (Math.floor(Math.random() * (999 - 1)) + 1))) + String((Math.floor(Math.random() * (999 - 1)) + 1));
                return res;
            },
            usings = 'Reveal Modal: http://zurb.com/playground/reveal-modal-plugin \n \
Input Mask: https://github.com/RobinHerbots/jquery.inputmask \n \
jQuery Form Styler: http://dimox.name/jquery-form-styler/';
        F = function(o, options) {
            var self = this;
            self.options = {}, self.container = {}, self.form = {}, self.report = undefined, self.config = undefined;
            var _id = '',
                _formLoaded = false,
                _bi = pseudoRandom() + pseudoRandom(),
                _o = o && o.hasOwnProperty && o instanceof $ ? o : $(o);
            var defaults = {
                width: undefined,
                formID: undefined,
                modal: true,
                ignoreButtons: false,
                additionalClass: undefined,
                config: '',
                inputmask: {},
                dates: {},
                useFormStyler: false,
                onLoad: {},
                onShow: {},
                onSuccess: {},
                onFail: {},
                onClose: {},
                onServerError: {},
                animationspeed: 300,
                closeonbackgroundclick: true,
                dismissmodalclass: 'close-dspopup-modal',
                calendar: {
                    days: ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'],
                    months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
                    months2: ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'],
                    sundayFirst: false,
                },
                formstyler: {},
            };
            var __init__ = function() {
                self.options = $.extend({}, defaults, options);
                _id = self.options.formID;
                self.config = self.options.config;
                if (!compareVersionjQuery('1.7') && self.options.useFormStyler) {
                    self.options.useFormStyler = false;
                    console.warn('DSFORM(#' + _id + '):Form Styler uses version jQuery 1.7.1 and higher. ');
                }
                if (self.options.useFormStyler) self.stylize(null, null);
                if (self.options.modal) {
                    if (!self.options.ignoreButtons) $('#' + _id + '.ds-form').remove();
                    if ($('*[data-dsform-id="' + _id + '"]').get().length > 0) {
                        self.container = $('*[data-dsform-id="' + _id + '"]');
                    } else {
                        self.container = $('<div class="ds-form dspopup-modal ' + _id + '"><div/>').appendTo('body');
                        self.container.attr('data-dsform-id', _id);
                    }
                    _o.bind('click', function(e) {
                        e.preventDefault();
                        self.config = $(this).attr('data-dsconfig') || self.config;
                        if (_bi != W['dsform' + _id + 'modal']) {
                            W['dsform' + _id + 'modal'] = _bi;
                            __getForm__();
                        };
                        if (_formLoaded) __align__();
                        __reveal__();
                        if (self.options.additionalClass) self.container.addClass(self.options.additionalClass);
                    });
                } else {
                    self.container = _o;
                    if (self.options.additionalClass) self.container.addClass(self.options.additionalClass);
                    self.config = _o.attr('data-dsconfig') || self.config;
                    __getForm__();
                }
            }
            var __align__ = function() {
                if (self.container.children().is('.scrollform')) {
                    self.form.appendTo(self.container);
                    self.container.find('.scrollform').remove();
                    self.container.css({
                        'height': 'auto'
                    });
                }
                var scrollbar = 0;
                self.container.css({
                    'height': '',
                    'width': ''
                });
                var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                if (window.innerWidth && document.documentElement.clientWidth) scrollbar = window.innerWidth - document.documentElement.clientWidth;
                if (self.options.width) self.container.width(self.options.width);
                if (windowWidth < (self.container.innerWidth() + 20)) self.container.width(+windowWidth - scrollbar - 20 - (self.container.innerWidth() - self.container.width()));
                var widthForm = self.container.innerWidth();
                var heightForm = self.container.outerHeight(true);
                var leftForm = Math.round((windowWidth - widthForm - scrollbar) / 2);
                if (windowHeight <= (heightForm + 20)) {
                    var topForm = 20,
                        marginScroll = 15,
                        paddingForm = heightForm - self.container.height();
                    self.container.append('<div class="scrollform"></div>');
                    self.form.appendTo(self.container.find('.scrollform'));
                    heightForm = windowHeight - topForm * 2;
                    self.container.find('.scrollform').height(heightForm - paddingForm - marginScroll);
                    self.container.find('.scrollform').css({
                        'overflow-y': 'scroll',
                        'margin': marginScroll + 'px 0'
                    });
                } else {
                    var topForm = Math.round((windowHeight - heightForm) / 2);
                }
                self.container.css({
                    'top': topForm + 'px',
                    'left': leftForm + 'px',
                });
            }
            var __send__ = function() {
                self.container.find('input[type="submit"]').hide();
                self.container.find('img.loadbuttom').show();
                if (!window.FormData) {
                    var dataform = self.form.serialize();
                    dataform = dataform + '&formid=' + _id;
                    $.ajax({
                        type: "POST",
                        url: "/ds-comf/ds-form/form.php",
                        dataType: "json",
                        cache: false,
                        data: dataform,
                        success: function(data) {
							if(_id == 'dscallme'){	
							 $.ajax({
								url: "http://portal.zoloterra.ru/StudyRequest/Add",
								data: {
									fullName: self.container.find('input[name="fieldname806641"]').val(),
									phone: self.container.find('input[name="fieldname386375"]').val(),
									Description: "Заказ звонка"
								},
								type: "GET",
								crossDomain: true,
								dataType: "jsonp"
							}); 
							};
							if(_id == 'dsskidka'){	
							console.log('sdfsdfsf');
							 $.ajax({
								url: "http://portal.zoloterra.ru/StudyRequest/Add",
								data: {
									fullName: self.container.find('input[name="custom_U22316"]').val(),
									phone: self.container.find('input[name="custom_U22311"]').val(),
									Description: "Скидка"
								},
								type: "GET",
								crossDomain: true,
								dataType: "jsonp"
							}); 
							};
							if(_id == 'dsfree_les'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="custom_U30203"]').val(),
										phone: $('input[name="custom_U30208"]').val(),
										Description: "Запись на бесплатный пробный урок"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'dslager'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="custom_U31347"]').val(),
										phone: $('input[name="custom_U31343"]').val(),
										Description: "Уведомить о наборе группы городского лагеря"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'dssignup'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="fieldname492711"]').val(),
										phone: $('input[name="fieldname3186"]').val(),
										eMail: $('input[name="email"]').val(),
										School: $($('input[name="fieldname697202[]"]:checked').prev('label')).text(),
										Description: "ВЫБЕРИТЕ ГРАФИК ЗАНЯТИЙ:" + $($('input[name="fieldname252703[]"]:checked').prev('label')).text() + "\nУдобные дни: " + $($('input[name="fieldname372655"]:checked').prev('label')).text() + " " + $($('input[name="fieldname457285"]:checked').prev('label')).text() + " " + $($('input[name="fieldname204700"]:checked').prev('label')).text() + " " + $($('input[name="fieldname12647"]:checked').prev('label')).text() + " " + $($('input[name="fieldname122510"]:checked').prev('label')).text() + " " + $($('input[name="fieldname331338"]:checked').prev('label')).text() + " " + $($('input[name="fieldname330168"]:checked').prev('label')).text()
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'dstest'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="custom_U22063"]').val(),
										phone: $('input[name="custom_U22068"]').val(),
										Description: "Запись на бесплатное тестирование уровня"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'otzyvy'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="fieldname623584"]').val(),
										Mail: $('input[name="email"]').val(),
										Description: "Отзыв с сайта: "+$('textarea[name="fieldname269237"]').val()
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'zapis'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									 data: {
										fullName: $('form[id="form-zapis"] input[name="fieldname95754"]').val(),
										phone: $('form[id="form-zapis"] input[name="fieldname269237"]').val(),
										eMail: $('form[id="form-zapis"] input[name="email"]').val(),
										learnerId: $('form[id="form-zapis"] input[name="fieldname623584"]').val(),
										Description: "Запись в группу " + $('form[id="form-zapis"] input[name="fieldname623584"]').val()
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'zayavka'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									 data: {
										fullName: self.container.find('input[name="fieldname623584"]').val(),
										phone: self.container.find('input[name="fieldname269237"]').val(),
										Mail: self.container.find('input[name="email"]').val(),
										Description: "Задать вопрос на главной странице"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
                            __result__(data);
							
                            
                        }
                    });
                } else {
                    var formData = new FormData(self.form.get(0));
                    formData.append('formid', _id);
                    $.ajax({
                        url: "/ds-comf/ds-form/form.php",
                        type: "POST",
                        contentType: false,
                        processData: false,
                        data: formData,
                        dataType: 'json',
                        success: function(data) {
                            if(_id == 'dscallme'){
							 $.ajax({
								url: "http://portal.zoloterra.ru/StudyRequest/Add",
								data: {
									fullName: self.container.find('input[name="fieldname806641"]').val(),
									phone: self.container.find('input[name="fieldname386375"]').val(),
									Description: "Заказ звонка"
								},
								type: "GET",
								crossDomain: true,
								dataType: "jsonp"
							}); 
							};
							if(_id == 'dsskidka'){	
							console.log('sdfsdfsf');
							 $.ajax({
								url: "http://portal.zoloterra.ru/StudyRequest/Add",
								data: {
									fullName: self.container.find('input[name="custom_U22316"]').val(),
									phone: self.container.find('input[name="custom_U22311"]').val(),
									Description: "Скидка"
								},
								type: "GET",
								crossDomain: true,
								dataType: "jsonp"
							}); 
							};
							if(_id == 'dsfree_les'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="custom_U30203"]').val(),
										phone: $('input[name="custom_U30208"]').val(),
										Description: "Запись на бесплатный пробный урок"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'dslager'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="custom_U31347"]').val(),
										phone: $('input[name="custom_U31343"]').val(),
										Description: "Уведомить о наборе группы городского лагеря"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'dssignup'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="fieldname492711"]').val(),
										phone: $('input[name="fieldname3186"]').val(),
										eMail: $('input[name="email"]').val(),
										School: $($('input[name="fieldname697202[]"]:checked').prev('label')).text(),
										Description: "ВЫБЕРИТЕ ГРАФИК ЗАНЯТИЙ:" + $($('input[name="fieldname252703[]"]:checked').prev('label')).text() + "\nУдобные дни: " + $($('input[name="fieldname372655"]:checked').prev('label')).text() + " " + $($('input[name="fieldname457285"]:checked').prev('label')).text() + " " + $($('input[name="fieldname204700"]:checked').prev('label')).text() + " " + $($('input[name="fieldname12647"]:checked').prev('label')).text() + " " + $($('input[name="fieldname122510"]:checked').prev('label')).text() + " " + $($('input[name="fieldname331338"]:checked').prev('label')).text() + " " + $($('input[name="fieldname330168"]:checked').prev('label')).text()
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'dstest'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('input[name="custom_U22063"]').val(),
										phone: $('input[name="custom_U22068"]').val(),
										Description: "Запись на бесплатное тестирование уровня"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'otzyvy'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									data: {
										fullName: $('#form-otzyvy input[name="fieldname623584"]').val(),
										eMail: $('#form-otzyvy input[name="email"]').val(),
										Description: "Отзыв с сайта: "+$('#form-otzyvy textarea[name="fieldname269237"]').val()
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'zapis'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									 data: {
										fullName: $('form[id="form-zapis"] input[name="fieldname95754"]').val(),
										phone: $('form[id="form-zapis"] input[name="fieldname269237"]').val(),
										eMail: $('form[id="form-zapis"] input[name="email"]').val(),
										learnerId: $('form[id="form-zapis"] input[name="fieldname623584"]').val(),
										Description: "Запись в группу " + $('form[id="form-zapis"] input[name="fieldname623584"]').val()
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
							if(_id == 'zayavka'){	
								$.ajax({
									url: "http://portal.zoloterra.ru/StudyRequest/Add",
									 data: {
										fullName: self.container.find('input[name="fieldname623584"]').val(),
										phone: self.container.find('input[name="fieldname269237"]').val(),
										Mail: self.container.find('input[name="email"]').val(),
										Description: "Задать вопрос на главной странице"
									},
									type: "GET",
									crossDomain: true,
									dataType: "jsonp"
								}); 
							};
						   __result__(data);
							
                        }
                    });
                }
                return false;
            }
            var __help__ = function() {
                self.form.find('input[data-dsform-date]').each(function() {
                    var field = $(this);
                    var format = field.attr('data-dsform-date');
                    var opts = typeof self.options.dates[field.attr('name')] === 'string' || typeof self.options.dates[field.attr('name')] === 'number' ? self.options.dates[field.attr('name')] : false;
                    self.attachCal(field, format, opts);
                });
                self.form.find('input[data-dsform-mask]').each(function() {
                    var field = $(this);
                    var format = field.attr('data-dsform-mask');
                    var opts = typeof self.options.inputmask[field.attr('name')] === 'object' ? self.options.inputmask[field.attr('name')] : {};
                    self.maskInput(field, format, opts);
                });
                if (self.options.useFormStyler !== false) {
                    var s = typeof self.options.useFormStyler === 'string' ? self.options.useFormStyler : 'select, input';
                    self.stylize(self.form.find(s), self.options.formstyler);
                }
            }
            var __validate__ = function() {
                self.form.find('input,textarea').bind('keyup', function() {
                    var field = $(this);
                    if (field.attr('pattern') && !field.val().match(field.attr('pattern'))) {
                        field.addClass('improper-value');
                    } else if (field.attr('pattern') && field.hasClass('improper-value')) {
                        field.removeClass('improper-value');
                    }
                    if (!field.attr('pattern') && field.hasClass('improper-value')) {
                        field.removeClass('improper-value');
                    }
                });
            }
            var __getForm__ = function() {
                var datajax;
                datajax = "formid=" + _id;
                if (self.config) {
                    var configs = self.config.replace(/'/g, '"');
                    try {
                        eval(JSON.parse(configs));
                        datajax += "&dsconfig=" + configs;
                    } catch (e) {
                        console.error('JSON array is improper for #' + _id + '!');
                    }
                }
                $.ajax({
                    url: "/ds-comf/ds-form/formtpl.php",
                    type: "POST",
                    dataType: "text",
                    data: datajax,
                    cache: false,
                    success: function(data) {
                        __construct__(data);
                    }
                });
            }
            var __construct__ = function(htmlcode) {
                if (self.container.find('form').get().length > 0) {
                    self.container.find('form').remove();
                };
                self.container.append(htmlcode);
                $('#' + _id + 'formmessagereport').remove();
                self.form = self.container.find('form');
                if (!_formLoaded && self.options.modal) {
                    _formLoaded = true;
                    $('.dspopup-modal-bg .loadform').remove();
                }
                var buttonheight;
                if (buttonheight = self.form.find('input[type="submit"]').outerHeight()) {
                    var buttonwidth = self.form.find('input[type="submit"]').outerWidth();
                    self.form.find('input[type="submit"]').before('<img src="/ds-comf/ds-form/images/loading.gif" class="loadbuttom" style="display: none">');
                    self.form.find('img.loadbuttom').height(buttonheight);
                    self.form.find('img.loadbuttom').css('margin-left', ((+buttonwidth) - (+buttonheight)) / 2);
                    self.form.find('img.loadbuttom').css('margin-right', ((+buttonwidth) - (+buttonheight)) / 2);
                    self.form.find('img.loadbuttom, input[type="submit"]').css('vertical-align', 'top')
                }
                if (self.form && self.form.length > 0) {
                    __help__();
                    __validate__();
                    self.form.bind('submit', __send__);
                    __refocus__();
                }
                if (!window.FormData) {
                    self.container.find(' *[type="file"]').css('display', 'none');
                }
                if (!self.container.hasClass('dspopup-modal') || !self.options.modal) {
                    self.container.find('*[autofocus]').focus();
                } else {
                    __align__();
                }
                if (typeof(self.options.onLoad) == "function") {
                    self.options.onLoad.call();
                }
            }
            var __result__ = function(data) {
                self.container.find('img.loadbuttom').hide();
                self.container.find('input[type="submit"]').show();
                delete(data['formid']);
                if (data['error'] == 1) {
                    delete(data['error']);
                    self.container.find('.error_form').empty();
                    var error_array = [];
                    $.each(data, function(index, val) {
                        if ($.inArray(val, error_array) == -1 && val != 1) error_array.push(val);
                        self.container.find('*[name="' + index + '"]').addClass('improper-value');
                    });
                    self.container.find('*[required]').each(function() {
                        var field = $(this);
                        if (field.hasClass('improper-value') && !data[field.attr('name')]) {
                            field.removeClass('improper-value');
                        }
                    });
                    var error_text = '<ul class="error-form">' + "\n";
                    $.each(error_array, function(index, val) {
                        error_text += '<li>' + val + '</li>' + "\n";
                    })
                    error_text += '</ul>' + "\n";
                    self.container.find('.error_form').append(error_text);
                    if (typeof self.options.onFail === 'function') {
                        self.options.onFail.call();
                    }
                    if (self.options.modal) {
                        __align__();
                    } else {
                        self.container.css('height', 'auto');
                    }
                } else if (data['error'] == 0 || data['error'] == 2) {
                    self.form.remove();
                    self.container.find('.scrollform').css('height', 'auto');
                    self.container.css('height', 'auto');
                    self.report = document.createElement('div');
                    self.report.id = _id + 'formmessagereport';
                    self.report = $(self.report);
                    self.report.append(data['error_text']);
                    self.container.append(self.report);
                    self.report.find('.repeat-form').bind('click', function(e) {
                        e.preventDefault();
                        $(this).unbind('click');
                        self.report.remove();
                        __getForm__();
                    });
                    if (self.container.hasClass('dspopup-modal') || self.options.modal) {
                        __align__();
                    }
                    if (data['error'] == 0 && typeof self.options.onSuccess === 'function') {
                        self.options.onSuccess.call();
                    }
                    if (data['error'] == 2 && typeof self.options.onServerError === 'function') {
                        self.options.onServerError.call();
                    }
                }
            }
            var __refocus__ = function() {
                self.form.find('input, textarea, select').bind('focusin', function() {
                    self.form.find('input[type="text"], textarea, select').each(function() {
                        $(this).removeClass('focusout');
                    });
                });
                self.form.find('input[type="text"]:not(input[readonly]),textarea:not(textarea[readonly]), select').bind('focusout', function() {
                    $(this).addClass('focusout');
                });
            }
            var __reveal__ = function() {
                var modal = self.container,
                    locked = false,
                    modalBG = $('.dspopup-modal-bg');
                if (modalBG.length == 0) {
                    modalBG = $('<div class="dspopup-modal-bg"></div>').insertAfter(modal);
                }
                if (!_formLoaded) modalBG.html('<img src="/ds-comf/ds-form/images/loading.gif" class="loadform" style="display: block">');
                modal.bind('dspopup:open', function() {
                    modalBG.unbind('click.modalEvent');
                    $('.' + self.options.dismissmodalclass).unbind('click.modalEvent');
                    if (!locked) {
                        lockModal();
                        modal.append('<div class="' + self.options.dismissmodalclass + ' dsclose-button"></div>');
                        modal.css({
                            'opacity': 0,
                            'visibility': 'visible',
                            'display': 'block'
                        });
                        modal.addClass('active-dspopup');
                        modalBG.fadeIn(self.options.animationspeed / 2);
                        modal.delay(self.options.animationspeed / 2).animate({
                            "opacity": 1
                        }, self.options.animationspeed, function() {
                            self.container.find('*[autofocus]').focus();
                            if (typeof self.options.onShow === "function") {
                                self.options.onShow.call();
                            }
                            unlockModal();
                        });
                    }
                    modal.unbind('dspopup:open');
                });
                modal.bind('dspopup:close', function() {
                    if (!locked) {
                        lockModal();
                        $('.' + self.options.dismissmodalclass).remove();
                        modal.removeClass('active-dspopup');
                        modalBG.delay(self.options.animationspeed).fadeOut(self.options.animationspeed);
                        modal.animate({
                            "opacity": 0
                        }, self.options.animationspeed, function() {
                            modal.css({
                                'opacity': 1,
                                'visibility': 'hidden',
                                'display': 'none'
                            });
                            if (self.options.additionalClass) self.container.removeClass(self.options.additionalClass);
                            if (typeof self.options.onClose === "function") {
                                self.options.onClose.call();
                            }
                            unlockModal();
                        });
                    }
                    modal.unbind('dspopup:close');
                });
                modal.trigger('dspopup:open');
                var closeButton = $('.' + self.options.dismissmodalclass).bind('click.modalEvent', function() {
                    modal.trigger('dspopup:close');
                });
                if (self.options.closeonbackgroundclick) {
                    modalBG.css({
                        "cursor": "pointer"
                    })
                    modalBG.bind('click.modalEvent', function() {
                        modal.trigger('dspopup:close');
                    });
                }
                $('body').keyup(function(e) {
                    if (e.which === 27) {
                        modal.trigger('dspopup:close');
                    }
                });

                function unlockModal() {
                    locked = false;
                }

                function lockModal() {
                    locked = true;
                }
            }
            self.maskInput = function($o, format, opts) {
                opts = $.extend({}, {
                    mask: format
                }, opts);
                try {
                    $o.inputmask(opts);
                    if (!window.maskedInputInclusionMarkForDSFORM) console.info('DSFORM: Input Mask was loaded before');
                } catch (err) {
                    if (!window.maskedInputInclusionMarkForDSFORM) {
                        var s = document.createElement('script');
                        s.src = '/ds-comf/ds-form/js/inputmask.js';
                        document.head.appendChild(s);
                        window.maskedInputInclusionMarkForDSFORM = true;
                    }
                    setTimeout(function() {
                        self.maskInput($o, format, opts);
                    }, 100);
                }
            }
            self.stylize = function($o, optns) {
                try {
                    $o.styler(optns);
                    if (!window.maskedInputInclusionMarkForDSFORM) console.info('DSFORM: Form Styler was loaded before');
                } catch (err) {
                    if (!window.formStylerInclusionMarkForDSFORM) {
                        var s = document.createElement('script');
                        s.src = '/ds-comf/ds-form/js/formstyler.js';
                        document.head.appendChild(s);
                        window.formStylerInclusionMarkForDSFORM = true;
                    }
                    setTimeout(function() {
                        self.stylize($o, optns);
                    }, 100);
                }
            }
            self.attachCal = function(field, view, udate) {
                var currdate = new Date();
                if (udate && typeof udate === 'string') {
                    udate = udate.split('.');
                    var theYear = parseInt(udate[2])
                    var theMonth = parseInt(udate[1]) - 1;
                    var theDay = parseInt(udate[0]);
                    theDay = theDay == 0 ? currdate.getDate() : theDay;
                    currdate = new Date(theYear, theMonth, theDay);
                } else if (udate && typeof udate === 'number') {
                    currdate = new Date(currdate.getFullYear(), currdate.getMonth() + udate, currdate.getDate());
                }
                var obj = document.createElement('span');
                obj.className = 'dsform-cal-layer';
                var btn = $('<span class="dsform-cal-btn"></span>').appendTo(field.parent());
                btn.bind('click', function() {
                    $(obj).toggle();
                    $(this).toggleClass('cal-chosen');
                });
                $(obj).hide();
                field.parent().append(obj);

                function set(d) {
                    d.day = self.options.calendar.sundayFirst == true ? d.getDay() : d.getDay() == 0 ? 6 : d.getDay() - 1;
                    d.date = d.getDate();
                    d.month = d.getMonth();
                    d.year = d.getFullYear();
                    d.nextMonth = new Date(d.year, d.month + 1, d.date);
                    d.prevMonth = new Date(d.year, d.month - 1, d.date);
                    d.days = Math.ceil((d.nextMonth - d) / 86400000);
                    var first = new Date(d.year, d.month, 1);
                    var last = new Date(d.year, d.month, d.days);
                    d.firstday = self.options.calendar.sundayFirst == true ? first.getDay() : first.getDay() == 0 ? 6 : first.getDay() - 1;
                    d.lastday = self.options.calendar.sundayFirst == true ? last.getDay() : last.getDay() == 0 ? 6 : last.getDay() - 1;
                    currdate = d;
                }
                var getP = function() {
                    set(currdate.prevMonth);
                    insert(obj);
                }
                var getN = function() {
                    set(currdate.nextMonth);
                    insert(obj);
                }
                var format = function(str, dd) {
                    var DD = dd < 10 ? '0' + dd : dd;
                    var D = dd;
                    var M = currdate.month + 1;
                    var MM = M < 10 ? '0' + M : M;
                    var MMM = self.options.calendar.months[currdate.month].slice(0, 3).toLowerCase();
                    var MMMM = self.options.calendar.months[currdate.month];
                    var MMMMM = self.options.calendar.months2[currdate.month];
                    var YY = String(currdate.year).slice(2, 4);
                    var YYYY = currdate.year;
                    var r = str.replace(/{D}/g, D).replace(/{DD}/g, DD).replace(/{M}/g, M).replace(/{MM}/g, MM).replace(/{MMM}/g, MMM).replace(/{MMMM}/g, MMMM).replace(/{MMMMM}/g, MMMMM).replace(/{YY}/g, YY).replace(/{YYYY}/g, YYYY);
                    return r;
                }
                var dayTD = function(tdo, date) {
                    $(tdo).attr('data-selected-date', format(view, date));
                    $(tdo).bind('click', function() {
                        field.val(format(view, date));
                        $(tdo).parents('.dsform-cal-layer').hide();
                        $(tdo).parents('.dsform-cal-layer').siblings('.dsform-cal-btn').toggleClass('cal-chosen');
                    });
                    return tdo;
                }
                var insert = function() {
                    var table = document.createElement('table'),
                        current = document.createElement('thead'),
                        daystr = document.createElement('tr'),
                        monthtr = document.createElement('tr'),
                        monthtd = document.createElement('td'),
                        weeks = document.createElement('tbody'),
                        daysarr = [];
                    monthtd.setAttribute('colspan', '7');
                    monthtd.className = 'mth-hdr';
                    var nm = document.createElement('span'),
                        pm = document.createElement('span');
                    nm.className = 'next-month month-btn';
                    pm.className = 'prev-month month-btn';
                    nm.addEventListener('click', getN);
                    pm.addEventListener('click', getP);
                    for (var n = 0; n < 7; n++) {
                        var wda = document.createElement('td');
                        wda.innerHTML = self.options.calendar.days[n];
                        wda.setAttribute('class', 'wday wda-' + n);
                        daystr.appendChild(wda);
                    }
                    monthtd.innerHTML = self.options.calendar.months[currdate.month] + ' ' + currdate.year;
                    monthtd.appendChild(pm);
                    monthtd.appendChild(nm);
                    monthtr.appendChild(monthtd);
                    current.appendChild(monthtr);
                    current.appendChild(daystr);
                    for (var n = -currdate.firstday + 1; n < 43; n++) {
                        daysarr.push(n);
                    }
                    for (i = 0; i < 7; i++) {
                        var tr = document.createElement('tr');
                        weeks.appendChild(tr);
                    }
                    for (var i = 0; i < 42; i++) {
                        var date = daysarr[i] < 1 || daysarr[i] > currdate.days ? '&nbsp;' : daysarr[i];
                        var td = document.createElement('td');
                        if (daysarr[i] == currdate.date) td.className = 'crrnt-day';
                        if (date == '&nbsp;') td.className = 'nodate';
                        if (date != '&nbsp;') {
                            td = dayTD(td, date);
                        }
                        var week = Math.floor(i / 7);
                        td.innerHTML = date;
                        weeks.children[week].appendChild(td);
                    }
                    table.className = 'dscalendar-table'
                    table.appendChild(current);
                    table.appendChild(weeks);
                    obj.innerHTML = '';
                    obj.appendChild(table);
                }
                set(currdate);
                insert(obj);
            }
            if (o && options.formID) __init__();
        }
        $.dsform = function(o, opts) {
            var result = new F(o, opts);
            return result;
        }
        $.dsform.v = function() {
            return version;
        }
        $.dsform.uses = function() {
            return usings;
        }
        $.fn.dsform = function(options) {
            this.each(function() {
                new F($(this), options);
            });
        }
        D.ready(function() {
            var styleforms = document.createElement('link');
            styleforms.rel = "stylesheet";
            styleforms.href = "/ds-comf/ds-form/formscss.php";
            document.head.appendChild(styleforms);
            $('.ds-form').each(function() {
                $.dsform($(this), {
                    formID: $(this).attr('id'),
                    modal: false
                });
            });
            $('*[data-dspopup-id]').each(function() {
                var id = $(this).attr('data-dspopup-id');
                $.dsform($(this), {
                    formID: id
                });
            });
        });
    }(window, document, jQuery));
}